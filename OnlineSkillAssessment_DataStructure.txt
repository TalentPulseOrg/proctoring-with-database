Online Skill Assessment System – Data Structure & API Blueprint
Generated on: 2025-06-07

---

1. Fields Currently Stored in LocalStorage

🧑‍💻 User Data
- userId: Unique identifier for users
- faceVerified: Boolean indicating if face verification was successful

📝 Test Configuration
- adminTests: Array of tests created by admins
  - testId: Unique identifier for each test
  - skill: Subject/skill being tested
  - numQuestions: Number of questions in the test
  - duration: Test duration in minutes

🧾 Test Form Data
- testFormData: Candidate information
  - name: Candidate's name
  - email: Candidate's email (used as candidate_id)

📚 Test Content
- testDetails: Details of the current test
  - skill: Subject/skill being tested
  - numQuestions: Number of questions
  - duration: Test duration
  - testId: Unique identifier

- currentTest: Active test data
  - questions: Array of question objects
    - question: Question text
    - options: Array of answer choices
    - correct_answer: The correct answer

📊 Test Results
- testResults: Results of completed tests
  - score: Number of correct answers
  - total: Total number of questions
  - percentage: Score percentage
  - timestamp: When the test was completed

⚡ Session Management
- currentSession: Active test session data
  - sessionId: Unique session identifier
  - testId: Associated test ID
  - startTime: When the test began
  - endTime: When the test ended (if completed)
  - status: Session status (active, completed, terminated)

---

2. Database Schema (Current Implementation)

🗃️ Tables

📋 Users
- id: Primary key (INTEGER)
- name: User's full name (VARCHAR)
- email: User's email address (VARCHAR, UNIQUE)
- role: User role (VARCHAR) - 'admin', 'candidate'
- created_at: Timestamp of user creation
- updated_at: Timestamp of last update

📝 Tests
- id: Primary key (INTEGER)
- test_id: Unique test identifier (INTEGER, UNIQUE)
- skill: Subject/skill being tested (VARCHAR)
- num_questions: Number of questions (INTEGER)
- duration: Test duration in minutes (INTEGER)
- created_by: Foreign key to Users table
- created_at: Timestamp of test creation
- updated_at: Timestamp of last update

❓ Questions
- id: Primary key (INTEGER)
- test_id: Foreign key to Tests table
- question_text: The question content (TEXT)
- correct_answer: The correct answer (VARCHAR)
- created_at: Timestamp of question creation

📑 Options
- id: Primary key (INTEGER)
- question_id: Foreign key to Questions table
- option_text: The option content (VARCHAR)
- is_correct: Boolean indicating if this is the correct option
- created_at: Timestamp of option creation

🎯 Test Sessions
- id: Primary key (INTEGER)
- test_id: Foreign key to Tests table
- user_id: Foreign key to Users table
- user_name: Name of the test taker (VARCHAR)
- user_email: Email of the test taker (VARCHAR)
- start_time: When the session started (DATETIME)
- end_time: When the session ended (DATETIME)
- status: Session status (VARCHAR) - 'active', 'completed', 'terminated'
- score: Final score (INTEGER)
- total_questions: Total number of questions (INTEGER)
- percentage: Score percentage (FLOAT)
- created_at: Timestamp of session creation
- updated_at: Timestamp of last update

📝 User Responses
- id: Primary key (INTEGER)
- session_id: Foreign key to Test Sessions table
- question_id: Foreign key to Questions table
- selected_option_id: Foreign key to Options table
- is_correct: Boolean indicating if the answer was correct
- response_time: Time taken to answer (INTEGER, seconds)
- created_at: Timestamp of response

🔐 Face Verification
- id: Primary key (INTEGER)
- user_id: Foreign key to Users table
- id_photo_path: Path to stored ID photo (VARCHAR)
- is_verified: Boolean indicating verification status
- verification_date: When verification was completed (DATETIME)
- match_score: Face matching confidence score (FLOAT)
- liveness_score: Liveness detection score (FLOAT)
- created_at: Timestamp of record creation
- updated_at: Timestamp of last update

⚠️ Violations
- id: Primary key (INTEGER)
- session_id: Foreign key to Test Sessions table
- violation_type: Type of violation (VARCHAR)
- description: Violation description (TEXT)
- severity: Severity level (VARCHAR) - 'low', 'medium', 'high'
- detected_at: When violation was detected (DATETIME)
- created_at: Timestamp of record creation

📸 Screen Captures
- id: Primary key (INTEGER)
- session_id: Foreign key to Test Sessions table
- file_path: Path to captured screenshot (VARCHAR)
- capture_time: When screenshot was taken (DATETIME)
- file_size: Size of the image file (INTEGER)
- created_at: Timestamp of record creation

🔍 Behavioral Anomalies
- id: Primary key (INTEGER)
- session_id: Foreign key to Test Sessions table
- anomaly_type: Type of anomaly detected (VARCHAR)
- confidence_score: Detection confidence (FLOAT)
- description: Anomaly description (TEXT)
- detected_at: When anomaly was detected (DATETIME)
- created_at: Timestamp of record creation

---

3. API Endpoints

🔐 Authentication
- POST /auth/upload-id-photo - Upload ID photo for verification
- POST /auth/verify-face - Verify live photo against ID photo
- POST /auth/check-liveness - Check if photo is of live person
- POST /auth/validate-session - Validate user session
- GET /auth/me - Get current user information
- POST /auth/set-role - Set user role
- POST /auth/check-role - Check user's current role

👥 User Management
- POST /api/users/register - Register new user
- POST /api/users/login - User login
- GET /api/users/ - Get all users
- GET /api/users/{user_id} - Get specific user
- PUT /api/users/{user_id} - Update user
- DELETE /api/users/{user_id} - Delete user

📝 Test Management
- POST /api/tests/create - Create new test
- GET /api/tests/all - Get all tests
- GET /api/tests/{test_id} - Get specific test
- PUT /api/tests/{test_id} - Update test
- DELETE /api/tests/{test_id} - Delete test
- POST /api/tests/generate - Generate test questions
- POST /api/tests/submit - Submit test results
- POST /api/tests/save-snapshot - Save webcam snapshot

🎯 Session Management
- POST /api/sessions/start - Start new test session
- POST /api/sessions/submit - Submit completed test
- POST /api/sessions/{session_id}/submit - Submit by session ID
- GET /api/sessions/user/{user_id} - Get user's sessions
- GET /api/sessions/test/{test_id} - Get test's sessions
- GET /api/sessions/{session_id} - Get specific session
- GET /api/sessions/completed - Get completed sessions
- GET /api/sessions/debug/all - Debug: get all sessions
- GET /api/sessions/user/{user_id}/results - Get user results
- POST /api/sessions/{session_id}/terminate - Terminate session
- GET /api/sessions/validate/{session_id} - Validate session

🛡️ Proctoring
- POST /api/proctoring/violation - Record violation
- GET /api/proctoring/violations/{session_id} - Get session violations
- POST /api/proctoring/screen-capture - Save screen capture
- GET /api/proctoring/screen-captures/{session_id} - Get session captures
- POST /api/proctoring/behavioral-anomaly - Record anomaly
- GET /api/proctoring/anomalies/{session_id} - Get session anomalies
- POST /api/proctoring/webcam-snapshot - Save webcam snapshot
- POST /api/proctoring/gaze/analyze - Analyze gaze tracking

📊 Analytics
- GET /api/analytics/user/{user_id} - Get user analytics
- GET /api/analytics/test/{test_id} - Get test analytics
- GET /api/analytics/violations - Get violation statistics
- GET /api/analytics/performance - Get performance statistics

📁 Media
- GET /api/media/file/{file_path} - Get media file
- GET /api/media/id-photo/{user_id} - Get user's ID photo
- GET /api/media/screen-capture/{session_id}/{filename} - Get screen capture

🔍 Monitoring
- POST /api/monitoring/capture - Capture monitoring frame
- GET /api/monitoring/suspicious - Get suspicious images
- POST /api/monitoring/log-event - Log monitoring event
- POST /api/monitoring/start-screen-capture - Start screen capture
- POST /api/monitoring/stop-screen-capture - Stop screen capture
- POST /api/monitoring/save-snapshot - Save monitoring snapshot
- GET /api/monitoring/suspicious-images/{test_id} - Get suspicious images
- GET /api/monitoring/monitoring-logs/{test_id} - Get monitoring logs

---

4. Key Features

🔒 Security Features
- Face verification using ID photo matching
- Liveness detection to prevent photo spoofing
- Real-time webcam monitoring
- Screen capture for proctoring
- Behavioral anomaly detection
- Violation tracking and reporting

📊 Test Management
- Admin test creation with custom parameters
- Question generation (manual or AI-assisted)
- Multiple choice questions with options
- Timed test sessions
- Real-time test progress tracking
- Automatic scoring and results

🖥️ Proctoring System
- Live webcam feed monitoring
- Screen capture at intervals
- Gaze tracking (when available)
- Tab switching detection
- Fullscreen enforcement
- Audio monitoring for suspicious sounds

📈 Analytics & Reporting
- User performance analytics
- Test completion statistics
- Violation reports
- Behavioral analysis
- Performance trends over time

---

5. File Storage Structure

📁 Media Files
```
media/
├── screenshots/
│   ├── test_1/
│   │   ├── webcam_snapshot_2023-06-20_14-30-05.jpg
│   │   └── screen_capture_2023-06-20_14-30-10.jpg
│   └── test_2/
├── snapshots/
│   ├── 1/
│   └── 2/
├── suspicious_snapshots/
│   ├── 1/
│   │   └── gaze_violations/
│   └── 2/
└── id_photos/
    ├── 1.jpg
    ├── 2.jpg
    └── ...
```

📊 Logs
```
monitoring_logs/
├── 1_events.json
├── 2_events.json
└── ...
```

1. Camera Permission Check => done
Log as suspicious if the user denies or revokes camera access at any point during the test.
2. Microphone Permission Check => done
Log as suspicious if the user denies or revokes microphone access at any point during the test.
3. Browser Compatibility Check => done
Log as suspicious if the user is not using a supported browser (e.g., not Chrome, Firefox, or Edge).
4. Tab Switching Control => done
Log as suspicious if the user switches away from the test tab (i.e., the tab becomes inactive) at any time during the test.
5. Window Blur Control => done
Log as suspicious if the test window loses focus (e.g., the user clicks outside the window or minimizes it).
6. Full Screen Enforcement => done 
Log as suspicious if the user exits full screen mode during the test.
7. Shortcut Keys Control => done
Log as suspicious if the user attempts to use restricted keyboard shortcuts (e.g., Alt+Tab, Ctrl+C, Ctrl+V, Print Screen, etc.).
8. Lighting Analysis => done
Log as suspicious if lighting conditions are too dark or change drastically (e.g., sudden darkness or brightness).
9. Gaze Tracking Analysis
Log as suspicious if the user’s gaze is away from the screen for a significant period (e.g., looking away for more than 2–3 seconds repeatedly).
10. Multiple Face Detection => done
Log as suspicious if more than one face is detected in the camera frame at any time.
11. Audio Monitoring
Log as suspicious if unusual or loud background noises are detected (e.g., voices, conversations, or other people speaking).
12. permission enable log => ProctorPermissionLog => done

---

This document serves as a comprehensive reference for the Online Skill Assessment System's data structure, API endpoints, and key features. It should be updated as the system evolves to maintain accuracy and usefulness for developers and stakeholders.












prompt = f"""You are an expert-level question generator tasked with creating {request.num_questions} high-quality multiple-choice questions (MCQs) on {request.skill}. Ensure accuracy, clarity, and adherence to Bloom’s Taxonomy. Adhere to following guidelines:

            ---
            ### *1. Topic Identification and Organization
            - Generate questions only for the provided topic {request.skill}.
            - Organize questions by topic, ensuring equal coverage across all topics.
            
            ### *2. Bloom's Taxonomy Coverage*
            - Ensure proper distribution of all six levels of Bloom's taxonomy as per the following chart:
                Remember : 10-15 percent
                Understand : 15-20 percent
                Apply : 25-30 percent
                Analyze : 15-20 percent
                Evaluate : 10-15 percent
                Create : 5-10 percent
                
            - *Remember*: Recall basic facts and definitions.  
            - *Understand*: Explain concepts or interpret information.  
            - *Apply*: Solve problems using learned techniques.  
            - *Analyze*: Break down information to examine relationships.  
            - *Evaluate*: Judge based on criteria or standards.  
            - *Create*: Formulate new solutions or ideas.  
            - Sort questions in the order of Bloom's taxonomy levels: remember, understand, apply, analyze, evaluate, and create.  
            
            ---
            
            ### *3. Question Design*  
            - Each question must be clear, concise, and self-contained.  
            - For applied questions, include *code snippets* where relevant, written in programming languages suitable to the "{request.skill}" (e.g., Python, JavaScript, etc.).  
            - Indicate the language explicitly in the "code" field.  
            - Ensure code snippets are executable and produce results aligned with the correct answer.  

            ---
            
            ### *4. Skills coverage
            - If comma seperated skills are provided, ensure questions of each comma seperated skill are included.
            - Generate equal number of questions of each skill.
            - Ensure generated questions are relevant to provided skills.

            ### *5. Options and Correct Answer*  
            - Provide *four options* (option1, option2, option3, option4) for each question.  
            - Systematically alternate the correct option between "A", "B", "C", and "D" across the set.  
            - Design *distractor options* (incorrect answers) to be plausible, closely related to the correct answer, and capable of challenging critical thinking.  

            ---
            
            ### *6. Difficulty Levels*  
            - Assign one of three difficulty levels to each question: *Easy, **Intermediate, or **Hard*.  
            - Ensure a balanced distribution of difficulty across questions.  

            ---
            
            ### *7. JSON Output Format*  
            Strictly adhere to the following JSON structure:
            {{
                "questions": [
                    {{
                        "topic": "{request.skill}",
                        "question": "What is ...?",
                        "code": "<language>\n<code_snippet>\n",
                        "options" : ["option A", "option B", "option C", "option D"],
                        "answer": "option A",
                        "BT_level": "understand",
                        "difficulty": "Easy"
                    }},
                ]
            }}

            ### *8. Verification Requirements*  
            - *Accuracy*: Verify the correctness of the provided correct option.  
            - *Code Execution*: For code-based questions, execute the code snippets in a sandbox environment to confirm results.  
            - *Distractor Quality*: Ensure incorrect options are plausible but not correct.  
            - *Taxonomy and Difficulty Validation*: Confirm that the Bloom's taxonomy level and difficulty level match the question's complexity.  

            ---

            ### *9. Additional Guidelines*  
            - Avoid ambiguity or overly complex jargon in questions and options.  
            - Use professional language and ensure all questions align with the topic and subtopic.  
            - Validate all Q&A pairs before finalizing.
            
            """